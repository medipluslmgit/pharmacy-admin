generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  doctor
  admin
  supervisor
  cashier
  counter
  customer
}

model User {
  id             String    @id @default(cuid())
  userName       String    @unique
  hashedPassword String
  role           UserRole
  email          String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  phone          String?
  lat            Float? // Direction
  lng            Float? // Direction
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Employee
  nss            String?
  rfc            String?
  salary         Float?
  birthday       DateTime?
  branchOfficeId String?
  branchOffice   BranchOffice? @relation(fields: [branchOfficeId], references: [id])

  // Doctor
  cedula String?

  // Relations
  accounts Account[]
  products Product[]

  createdOrders  PuchaseOrder[] @relation("createdBy")
  finishedOrders PuchaseOrder[] @relation("finishedBy")

  createdTickets  Ticket[]  @relation("createdBy")
  updatedTickets  Ticket[]  @relation("updatedBy")
  puchasedTickets Ticket[]  @relation("purchasedBy")
  Credits         Credits[]

  @@index([userName])
  @@index([email])
  @@index([branchOfficeId])
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum BranchOfficeStatus {
  planning
  active
  inactive
}

model BranchOffice {
  id          String             @id @default(cuid())
  name        String
  description String?
  lat         Float?
  lng         Float?
  phone       String?
  createdAt   DateTime           @default(now())
  status      BranchOfficeStatus @default(planning)

  users        User[]
  PuchaseOrder PuchaseOrder[]
  Ticket       Ticket[]
}

enum ProductCategoryStatus {
  active
  inactive
}

model ProductCategory {
  id          String                @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  status      ProductCategoryStatus @default(active)

  products Product[]
}

model ProductForm {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model ProductAdministrationWay {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

enum ProductStatus {
  active
  inactive
}

model Product {
  id                  String         @id @default(cuid())
  name                String
  description         String
  gtin                String         @unique
  laboratory          String?
  isGeneric           Int
  group               Int            @default(0)
  isControlledProduct Boolean?
  isAntibiotic        Boolean?
  isRefrigerated      Boolean?
  status              ProductStatus  @default(active)
  productImages       ProductImage[]
  createdAt           DateTime       @default(now()) @db.DateTime(6)
  updatedAt           DateTime       @default(now()) @db.DateTime(6)

  // Sale Data
  pharmacyPrice Float?
  clinicPrice   Float?
  websitePrice  Float?
  stock         Int    @default(0)

  createdById          String?
  createdBy            User?                    @relation(fields: [createdById], references: [id])
  productCategoryId    String
  productCategory      ProductCategory          @relation(fields: [productCategoryId], references: [id])
  productFormId        String
  productForm          ProductForm              @relation(fields: [productFormId], references: [id])
  administrationWay    String
  administration       ProductAdministrationWay @relation(fields: [administrationWay], references: [id])
  purchaseORderProduct PurchaseOrderProduct[]
  productExpiration    ProductExpiration[]
  ticketItems          TicketItems[]

  @@index([productCategoryId])
  @@index([productFormId])
  @@index([administrationWay])
  @@index([createdById])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String  @db.VarChar(99)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

enum ProviderStatus {
  active
  inactive
}

model Provider {
  id          String         @id @default(cuid())
  name        String
  rfc         String
  contactName String?
  email       String?
  phone       String?
  status      ProviderStatus @default(active)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  PuchaseOrder PuchaseOrder[]
}

enum PurchaseOrderPaymentType {
  credit
  cash
}

enum PurchaseOrderStatus {
  planning
  requested
  confirmed
  canceled
  finished
}

model PuchaseOrder {
  id          String                   @id @default(cuid())
  paymentType PurchaseOrderPaymentType @default(cash)
  status      PurchaseOrderStatus
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  products    PurchaseOrderProduct[]

  providerId     String
  provider       Provider     @relation(fields: [providerId], references: [id])
  branchOfficeId String
  branchOffice   BranchOffice @relation(fields: [branchOfficeId], references: [id])
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id], name: "createdBy")
  finishedById   String?
  finishedBy     User?        @relation(fields: [finishedById], references: [id], name: "finishedBy")

  @@index([providerId])
  @@index([branchOfficeId])
  @@index([createdById])
  @@index([finishedById])
}

model PurchaseOrderProduct {
  id             String   @id @default(cuid())
  expirationDate DateTime @default(now()) @db.DateTime(0)
  units          Int

  purchasePricing Float
  subTotal        Float

  pharmacyPricing Float
  websitePricing  Float
  clinicPricing   Float
  maxPricing      Float

  createdAt DateTime @default(now()) @db.DateTime(6)
  updatedAt DateTime @updatedAt

  productId         String?
  product           Product?            @relation(fields: [productId], references: [id])
  purchaseOrderId   String?
  purchaseOrder     PuchaseOrder?       @relation(fields: [purchaseOrderId], references: [id])
  productExpiration ProductExpiration[]

  @@index([productId])
  @@index([purchaseOrderId])
}

model ProductExpiration {
  id             String   @id @default(cuid())
  expirationDate DateTime
  units          Int
  createdAt      DateTime @default(now()) @db.DateTime(6)
  updatedAt      DateTime @updatedAt

  purchaseOrderProductId String?
  purchaseOrderProduct   PurchaseOrderProduct? @relation(fields: [purchaseOrderProductId], references: [id])
  productId              String?
  product                Product?              @relation(fields: [productId], references: [id])

  @@index([purchaseOrderProductId])
  @@index([productId])
}

enum TicketOrigin {
  pharmacy
  website
}

enum TicketStatus {
  open
  canceled
  closed
}

model Ticket {
  id            String       @id @default(cuid())
  origin        TicketOrigin @default(pharmacy)
  status        TicketStatus @default(open)
  terminalFolio String?      @db.VarChar(255)
  paymentMethod String       @default("CASH") @db.VarChar(255)
  doctorId      Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  branchOfficeId String
  branchOffice   BranchOffice @relation(fields: [branchOfficeId], references: [id])

  createdById   String
  createdBy     User          @relation(fields: [createdById], references: [id], name: "createdBy")
  updatedById   String?
  updatedBy     User?         @relation(fields: [updatedById], references: [id], name: "updatedBy")
  purchasedById String?
  purchasedBy   User?         @relation(fields: [purchasedById], references: [id], name: "purchasedBy")
  ticketItems   TicketItems[]

  @@index([updatedById])
  @@index([createdById])
  @@index([branchOfficeId])
  @@index([purchasedById])
}

model TicketItems {
  id        String @id @default(cuid())
  quantity  Int
  soldPrice Float
  subtotal  Float

  ticketId  String
  ticket    Ticket  @relation(fields: [ticketId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([ticketId])
  @@index([productId])
}

enum CreditStatus {
  pending
  paid
}

model Credits {
  id             String          @id @default(cuid())
  amount         Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  expirationDate DateTime
  status         CreditStatus    @default(pending)
  creditPayments CreditPayment[]

  debtorId String
  debtor   User   @relation(fields: [debtorId], references: [id])

  @@index([debtorId])
}

model CreditPayment {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creditId String
  credit   Credits @relation(fields: [creditId], references: [id])

  @@index([creditId])
}
